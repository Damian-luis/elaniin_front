import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import TextMobileStepper from "@/components/Carrousel";
import SearchBar from "../components/Search"
import { Typography } from "@mui/material";
import Button from '@mui/material/Button';
import CloudUploadIcon from '@mui/icons-material/CloudUpload';
import MobileStepper from '@mui/material/MobileStepper';
import { uploadBook } from "./api/books";
import { useState } from "react";
import { styled } from '@mui/material/styles';
import {BooksProvider} from "../context/BooksContext"
import { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField } from '@mui/material';
const inter = Inter({ subsets: ["latin"] });

const VisuallyHiddenInput = styled('input')({
  clip: 'rect(0 0 0 0)',
  clipPath: 'inset(50%)',
  height: 1,
  overflow: 'hidden',
  position: 'absolute',
  bottom: 0,
  left: 0,
  whiteSpace: 'nowrap',
  width: 1,
});

export default function Home() {

    //handler para carga de archivos 
const [error, setError] = useState(null);



//modal
const [open, setOpen] = useState(false); 
  const [title, setTitle] = useState(''); 
  const [file, setFile] = useState(null); 

  const handleFileChange = (event:any) => {
    const selectedFile = event.target.files[0];
    if (!selectedFile) return;
    setFile(selectedFile);
  }
  const handleTitleChange = (event:any) => {
    setTitle(event.target.value);
  };

  const handleOpenModal = () => {
    setOpen(true);
  };

  const handleCloseModal = () => {
    setOpen(false);
  };

  const handleUploadBook = async () => {
    if (!title) {
      alert('Please enter a title before uploading the book.');
      return;
    }

    if (!file) {
      alert('Please select a book file to upload.');
      return;
    }

    try {

      await uploadBook(file,title);

    } catch (error: Error | any) {
      console.log(error)
      setError(error.message || 'Error al cargar el libro');
    }

    handleCloseModal();
  };

  return (
    <>
      <Head>
        <title>Elaniin books IA</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{
      width:"100%",
      height:"100vh",
      display:"flex",
      flexDirection:"column",
      padding:"2%",
      gap:"5%"
    }}>
      
     <SearchBar/>
     <div style={{
      display:"flex",
      flexDirection:"column",
      alignItems:"center"
     }}>
      <div style={{
      paddingBottom:"10px"
     }}>
      <Typography style={{fontSize:"30px",fontWeight:"500"}}>Mis libros</Typography>
      </div>
      
     <TextMobileStepper/>
     <div >

     <Button variant="contained" onClick={handleOpenModal}>Cargar libro</Button>

      <Dialog open={open} onClose={handleCloseModal}>
        <DialogTitle>Agregar libro</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Introduzca el título del libro o algun nombre de referencia
          </DialogContentText>
          <br />
          <TextField
            autoFocus
            label="Título"
            value={title}
            onChange={handleTitleChange}
            required
          />
          <br />
          <br />
          <input type="file" onChange={handleFileChange} />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseModal}>Cancelar</Button>
          <Button variant="contained" onClick={handleUploadBook}>Subir libro</Button>
        </DialogActions>
      </Dialog>
      
     </div>
     </div>
    </main>
   
    </>
  );
}
